/*const express = require('express');
const bodyParser = require('body-parser');
const mysqlConnection = require('../server');

const app = express();
console.log("hhhhh");
// Middleware
app.use(bodyParser.json());


// Get cart items
app.get('/cart', (req, res) => {
  const sql = 'SELECT * FROM cart_items';
  mysqlConnection.query(sql, (err, result) => {
    if (err) {
      console.error('Error fetching cart items:', err);
      res.status(500).json({ error: 'Failed to fetch cart items' });
      return;
    }
    res.json({ cartItems: result });
  });
});

// Add item to cart
app.post('/cart/add', (req, res) => {
  const { item } = req.body;
  const sql = 'INSERT INTO cart_items SET ?';
  mysqlConnection.query(sql, item, (err, result) => {
    if (err) {
      console.error('Error adding item to cart:', err);
      res.status(500).json({ error: 'Failed to add item to cart' });
      return;
    }
    res.status(200).json({ message: 'Item added to cart successfully' });
  });
});

// Update item quantity in cart
app.put('cart/update/:itemId', (req, res) => {
  const { itemId } = req.params;
  const { quantity } = req.body;
  const sql = 'UPDATE cart_items SET quantity = ? WHERE id = ?';
  mysqlConnection.query(sql, [quantity, itemId], (err, result) => {
    if (err) {
      console.error('Error updating item quantity:', err);
      res.status(500).json({ error: 'Failed to update item quantity' });
      return;
    }
    res.status(200).json({ message: 'Item quantity updated successfully' });
  });
});

// Delete item from cart
app.delete('/api/cart/delete/:itemId', (req, res) => {
  const { itemId } = req.params;
  const sql = 'DELETE FROM cart_items WHERE id = ?';
  connection.query(sql, itemId, (err, result) => {
    if (err) {
      console.error('Error deleting item from cart:', err);
      res.status(500).json({ error: 'Failed to delete item from cart' });
      return;
    }
    res.status(200).json({ message: 'Item deleted from cart successfully' });
  });
});

// Clear all items from cart
app.delete('/cart/clear', (req, res) => {
  const sql = 'DELETE FROM cart_items';
  mysqlConnection.query(sql, (err, result) => {
    if (err) {
      console.error('Error clearing cart:', err);
      res.status(500).json({ error: 'Failed to clear cart' });
      return;
    }
    res.status(200).json({ message: 'Cart cleared successfully' });
  });
});
*/

/*
// cart routes

router.post('/add-to-cart', async(req, res)=> {
  const {userId, productId, price} = req.body;

  try {
    const user = await User.findById(userId);
    const userCart = user.cart;
    if(user.cart[productId]){
      userCart[productId] += 1;
    } else {
      userCart[productId] = 1;
    }
    userCart.count += 1;
    userCart.total = Number(userCart.total) + Number(price);
    user.cart = userCart;
    user.markModified('cart');
    await user.save();
    res.status(200).json(user);
  } catch (e) {
    res.status(400).send(e.message);
  }
})

router.post('/increase-cart', async(req, res)=> {
  const {userId, productId, price} = req.body;
  try {
    const user = await User.findById(userId);
    const userCart = user.cart;
    userCart.total += Number(price);
    userCart.count += 1;
    userCart[productId] += 1;
    user.cart = userCart;
    user.markModified('cart');
    await user.save();
    res.status(200).json(user);
  } catch (e) {
    res.status(400).send(e.message);
  }
});

router.post('/decrease-cart', async(req, res)=> {
  const {userId, productId, price} = req.body;
  try {
    const user = await User.findById(userId);
    const userCart = user.cart;
    userCart.total -= Number(price);
    userCart.count -= 1;
    userCart[productId] -= 1;
    user.cart = userCart;
    user.markModified('cart');
    await user.save();
    res.status(200).json(user);
  } catch (e) {
    res.status(400).send(e.message);
  }
})

router.post('/remove-from-cart', async(req, res)=> {
  const {userId, productId, price} = req.body;
  try {
    const user = await User.findById(userId);
    const userCart = user.cart;
    userCart.total -= Number(userCart[productId]) * Number(price);
    userCart.count -= userCart[productId];
    delete userCart[productId];
    user.cart = userCart;
    user.markModified('cart');
    await user.save();
    res.status(200).json(user);
  } catch (e) {
    res.status(400).send(e.message);
  }
})




module.exports = router;*/